[user]
    name = Ben Peachey
    email = potherca@gmail.com

[core]
    excludesfile = ~/.git.d/ignore
    editor = gedit

[alias]
    st = status
    stat = status
    cl = clone
    ci = commit
    co = checkout
    cd = checkout
    up = pull --all

    ## https://git.wiki.kernel.org/index.php/Aliases
    undo-all-local-changes=reset --hard
    changes=diff --name-status -r
    new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
    graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
    who = shortlog -s --

    ##
    graph = log --graph --oneline --decorate
    #info = cat-file commit HEAD
    log = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

    ## http://blog.blindgaenger.net/advanced_git_aliases.html
    this     = !git init && git add . && git commit -m \"initial commit\"
    amend    = !git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend
    cleanout = !git ls-files -z --deleted | xargs -0 git rm
    alias    = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\t=> \\2/' | sort
    ignore   = !([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore


    #impact = !git ls-files -z | xargs -0n1 git blame -w -C | sed -r 's/^[^(]+\\((.*) [0-9]{4}-.*/\\1/' | sed -r 's/ +$//' | sort -f | uniq -c | sort -nr
    #funcdiff '!sh -c "git show \"\$1:\$3\" | sed -n \"/^[^ \t].*\$4(/,/^}/p\" > .tmp1 && git show \"\$2:\$3\" | sed -n \"/^[^ \t].*\$4(/,/^}/p\" > .tmp2 && git diff --no-index .tmp1 .tmp2"' -


    ## Home Grown
    ## @FIXME: All of these examples should be checked to see if they need the current branch or master or develop (if in git flow repo)

    info     = !echo 'URL(s):' && git remote -v  && echo '' && echo 'Branche(s):' && git branch -a && echo '' && git log --max-count=1 --pretty=format:'Last Changed Author: %an%nLast Channged Rev: %h%nLast Changed Date:  %cD%n  %aD '
    settings = config --list
    staged   = diff --cached
    tags     = tag -n1 -l
    unstash  = stash pop
    update-branch  = !~/.git.d/git-update-branch.sh
    incoming = !git fetch && git log --decorate ..origin/master #origin/master..HEAD
    unpushed = log --branches --not --remotes --decorate
    #delete-remote-branch = push origin --delete branch


    ## inspired by http://gitready.com/advanced/2011/10/21/ribbon-and-catchup-reading-new-commits.html
    unseen-changes = !~/.git.d/git-unseen-changes.sh

[color]
        ui = true
        pager = true
        diff = auto
        status = auto
        branch = auto
        interactive = auto


[color "branch"]
        current = yellow reverse
        local = yellow
        remote = green


[color "diff"]
        meta = yellow bold
        frag = magenta bold
        old = red bold
        new = green bold


[color "status"]
        added = yellow
        changed = green
        untracked = cyan

[mergetool]
    keepBackup = false
